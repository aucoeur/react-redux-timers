{"version":3,"sources":["actions/index.js","Timer.js","reducers/timers-reducers.js","reducers/select-timer-reducer.js","reducers/index.js","components/new-timer.js","components/timer-view.js","utils/index.js","components/list-timers.js","App.js","serviceWorker.js","index.js"],"names":["addTimer","name","type","payload","toggleTimer","index","selectTimer","Timer","this","time","isRunning","timerReducer","state","action","newState","map","timer","deltaTime","selectTimerReducer","combineReducers","timers","selectedTimer","NewTimer","props","className","placeholder","value","onChange","e","setState","target","onClick","Component","connect","TimerView","buttonClass","ms","Math","round","secs","floor","mins","hrs","formatTime","ListTimers","i","key","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","reducers","subscribe","throttle","stringify","setItem","console","log","saveState","getState","lastUpdateTime","Date","now","setInterval","dispatch","update","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e45b264.chunk.js","sourcesContent":["export const NEW_TIMER      = \"NEW_TIMER\"\nexport const TOGGLE_TIMER   = \"TOGGLE_TIMER\"\nexport const SELECT_TIMER   = \"SELECT_TIMER\"\nexport const UPDATE         = \"UPDATE\"\n\n\nexport const addTimer = (name) => {\n    return {\n        type: NEW_TIMER,\n        payload: { name }\n    }\n}\n\nexport const toggleTimer = (index) => {\n    return {\n        type: TOGGLE_TIMER,\n        payload: { index }\n    }\n}\n\nexport const selectTimer = (index) => {\n    return {\n        type: SELECT_TIMER,\n        payload: { index }\n    }\n}\n\nexport const update = (deltaTime) => {\n    return {\n        type: UPDATE,\n        payload: { deltaTime }\n    }\n}","import React from 'react';\n\nclass Timer {\n    // The name property is passed into the consctructor and the class is initialized\n    constructor(name) {\n        this.name = name;\n        this.time = 0;\n        this.isRunning = false;\n    }\n}\n\nexport default Timer;","import { NEW_TIMER, TOGGLE_TIMER, UPDATE } from '../actions';\nimport Timer from '../Timer';\n\nconst timerReducer = (state = [], action) => {\n    switch (action.type) {\n        case NEW_TIMER:\n            //  Add a new timer, return a copy of state\n            const name = action.payload.name ? action.payload.name : `Timer $(state.length)`\n            return [...state, new Timer(name)]\n        \n        case TOGGLE_TIMER:\n            // Invert the isRunning property of timer at index, return a copy of state\n            const newState = state.map((timer, index) => {\n                if (action.payload.index === index ) {\n                    return{...timer, isRunning: !timer.isRunning}\n                }\n                return timer\n            })\n            return newState\n        case UPDATE:\n            return state.map((timer) => {\n                if (timer.isRunning) {\n                    timer = { ...timer, time: timer.time += action.payload.deltaTime }\n                }\n                return timer\n            })\n        default:\n            return state;\n    }       \n}\nexport default timerReducer;","// Import the SELECT_TIMER action\nimport { SELECT_TIMER } from '../actions';\n\nconst selectTimerReducer = (state = null, action) => {\n    switch (action.type) {\n        //On the SELECT_TIMER action, set the selectedTImer to the value passed in the payload\n        case SELECT_TIMER:\n            return state = action.payload.index;\n        default:\n            return state;\n    }\n}\nexport default selectTimerReducer;","import { combineReducers } from 'redux';\n\nimport timerReducer from './timers-reducers';\nimport selectTimerReducer from './select-timer-reducer';\n\nexport default combineReducers({\n    timers: timerReducer,                   // array\n    selectedTimer: selectTimerReducer,      // int/number\n});","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { addTimer } from '../actions';\n\nimport './new-timer.css';\n\nclass NewTimer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = { name: \"\" }\n    }\n\n    render() {\n        //Build out a component that takes a name as input and a save button to save the timer\n        return (\n            <div className='new-timer'>\n                <input\n                    className='new-timer__input'\n                    type='text'\n                    placeholder='New Timer Name'\n                    name='name'\n                    value={this.state.name}\n                    onChange={ (e) => this.setState({ name: e.target.value })} />\n                <button\n                    className='new-timer__button'\n                    onClick={ (e) => {\n                        this.props.addTimer(this.state.name)\n                    }}>Save</button>\n            </div>\n        )\n    }\n}\n// Not needed for this component - used for selecting the part of the data from the store that the connected component needs.\nconst mapStateToProps = (state) => {\n  return {}\n}\n\n// Use 'mapDispatchToProps' to connect the 'newTimer' action creator to this component. used for dispatching actions to the store. Here is a stub for the component:\nconst mapDispatchToProps = () => {\n  return { addTimer }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(NewTimer)","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport { toggleTimer } from '../actions';\nimport { formatTime } from '../utils';\n\nimport './timer-view.css'\n\nclass TimerView extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    // Timer should have its name, time and a start/stop button (logic for this button will be built out later)\n    render() {\n        const { index, toggleTimer, timer } = this.props;\n        const buttonClass = timer.isRunning ? \"stop\" : \"start\";\n        return (\n            <div className='timer-view'>\n                <h2 className='timer-view-name__h2'>{timer.name}</h2>\n                    <h1 className='timer-view-time__h1'>{formatTime(timer.time)}</h1>\n                <button className={`timer-view__button timer-view__button--${buttonClass}`}\n                    // This calls our toggleTimer action on the specific timer (specified by the index)\n                    onClick={ (e) => {\n                        toggleTimer(index)\n                    }}>\n                    {/* // Text of the button is determined by if the timer is running or not */}\n                    {timer.isRunning ? \"Stop\" : \"Start\"}\n                </button>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n  return {}\n}\n\n// Use the toggleTimer action for this component\nconst mapDispatchToProps = () => {\n  return { toggleTimer }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(TimerView)","const TIMERS_STATE = \"TIMERS_STATE\"\n\n// Load State\nexport const loadState = () => {\n    try {\n        // Grab the state from local storage\n        const serializedState = localStorage.getItem(TIMERS_STATE)\n        if (serializedState === null) {\n            return undefined\n        }\n        // convert the string into JSON for the Redux store\n        return JSON.parse(serializedState)\n    } catch(err) {\n        return undefined\n    }\n}\n\n// Save State\nexport const saveState = (state) => {\n    try {\n        // convert the state from JSON, into a string\n        const serializedState = JSON.stringify(state)\n        // save the state to local storage\n        localStorage.setItem(TIMERS_STATE, serializedState)\n    } catch(err) {\n        console.log(\"Error saving data\")\n    }\n}\n\nexport const formatTime = (time) => {\n    const ms = Math.round(time / 100) % 10\n    const secs = Math.floor(time / 1000) % 60\n    const mins = Math.floor(time /1000 / 60) % 60\n    const hrs = Math.floor(time / 1000 / 1000 / 60) % 60\n    return `${hrs}:${mins}:${secs}.${ms}`\n}","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { selectTimer } from '../actions';\n\nimport TimerView from './timer-view';\n\nclass ListTimers extends Component {\n    constructor(props) {\n        super(props)\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.timers.map((timer, i) => <TimerView key={i} timer={timer} index={i} />)}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return { timers: state.timers }\n}\n\nconst mapDispatchToProps = () => {\n    return { selectTimer }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(ListTimers)","import React, { Component } from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport reducers from './reducers';\nimport { update } from './actions';\nimport { loadState, saveState } from './utils';\nimport throttle from 'lodash/throttle';\n\n// import logo from './logo.svg';\nimport './App.css';\n\nimport NewTimer from './components/new-timer';\nimport ListTimers from './components/list-timers'\n\nconst persistedState = loadState()\nconst store = createStore(reducers, persistedState);\n\nstore.subscribe(throttle(() => {\n  saveState(store.getState())\n}, 1000));\n\nlet lastUpdateTime = Date.now()\nsetInterval(() => {\n  const now = Date.now()\n  const deltaTime = now - lastUpdateTime\n  lastUpdateTime = now\n  store.dispatch(update(deltaTime))\n}, 50)\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Welcome to React</h1>\n          </header>\n            <NewTimer />\n            <ListTimers />\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}